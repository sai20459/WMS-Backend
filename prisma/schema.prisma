generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model user {
    id         Int      @id @default(autoincrement())
    email      String   @unique
    password   String
    first_name String
    last_name  String
    gender     Gender
    dob        DateTime
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
    last_login DateTime @default(now())
    login      login?
}

model login {
    id                      String   @id @default(cuid())
    access_token            String   @unique
    refresh_token           String
    access_token_created_at DateTime
    user                    user     @relation(fields: [user_id], references: [id])
    user_id                 Int      @unique
}

model Provider {
    id      Int     @id @default(autoincrement())
    name    String
    address String
    order   order[]
}

model order {
    id          Int           @id @default(autoincrement())
    date        DateTime      @default(now())
    provider    Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  Int
    orderDetail orderDetail[]
}

model orderDetail {
    id           Int       @id @default(autoincrement())
    quality      Int
    expectedDate DateTime  @default(now())
    actualDate   DateTime  @default(now())
    order        order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId      Int
    productId    Int
    product      product   @relation(fields: [productId], references: [id])
    warehouseId  Int
    warehouse    warehouse @relation(fields: [warehouseId], references: [id])
}

model transfer {
    id           Int       @id @default(autoincrement())
    quantity     Int
    sentDate     DateTime  @default(now())
    receivedDate DateTime  @default(now())
    productId    Int
    product      product   @relation(fields: [productId], references: [id])
    warehouseId  Int
    warehouse    warehouse @relation(fields: [warehouseId], references: [id])
}

model product {
    id              Int               @id @default(autoincrement())
    name            String
    description     String
    quantity        Int
    price           Int
    barcode         Int
    orderDetail     orderDetail[]
    deliveryDetails deliveryDetails[]
    inventory       inventory[]
    transfer        transfer[]
}

model customer {
    id       Int        @id @default(autoincrement())
    name     String
    mobile   Int
    email    String
    address  String?
    delivery delivery[]
}

model delivery {
    id              Int               @id @default(autoincrement())
    salesDate       DateTime          @default(now())
    customerId      Int
    customer        customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
    deliveryDetails deliveryDetails[]
}

model deliveryDetails {
    id           Int       @id @default(autoincrement())
    quantity     Int
    expectedDate DateTime  @default(now())
    actualDate   DateTime  @default(now())
    deliverId    Int
    delivery     delivery  @relation(fields: [deliverId], references: [id], onDelete: Cascade)
    productId    Int
    product      product   @relation(fields: [productId], references: [id])
    warehouseId  Int
    warehouse    warehouse @relation(fields: [warehouseId], references: [id])
}

model location {
    id        Int         @id @default(autoincrement())
    name      String
    address   String
    warehouse warehouse[]
}

model inventory {
    id                 Int     @id @default(autoincrement())
    quantityAvailabele Int
    minStockLevel      Int
    maxStockLevel      Int
    ReorderPoint       Int
    productId          Int
    product            product @relation(fields: [productId], references: [id])
}

model warehouse {
    id              Int               @id @default(autoincrement())
    name            String
    address         String
    locationId      Int
    location        location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
    orderDetail     orderDetail[]
    deliveryDetails deliveryDetails[]
    transfer        transfer[]
}

enum Gender {
    male
    female
    others
}
